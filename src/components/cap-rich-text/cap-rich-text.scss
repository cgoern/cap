/**
 *
 * Modules
 *
 */

@use './../../shared/cap.m' as cap;
@use './cap-rich-text.m' as self;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

/**
 *
 * Variables
 *
 */

$baseSizes: (
  '+1': map.get(cap.$sizes, '+1'),
  '0': map.get(cap.$sizes, '0'),
  '-1': map.get(cap.$sizes, '-1'),
);

/**
 *
 * Rules
 *
 */

cap-rich-text {
  /** @prop --cap-richTextAnchorColor: Description... */
  /** @prop --cap-richTextAnchorFontWeight: Description... */

  display: block;
  font-family: var(--cap-richTextFontFamily);
  font-feature-settings: var(--cap-richTextFontFeatureSettings);
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;

  /**
   *
   * Scales
   *
   */

  &.adaptive {
    --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-medium);
    --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-medium);

    @for $i from 1 through 6 {
      --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-medium);
      --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-medium);
    }

    @media (pointer: coarse) {
      --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-large);
      --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-large);

      @for $i from 1 through 6 {
        --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-large);
        --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-large);
      }
    }
  }

  &.medium {
    --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-medium);
    --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-medium);

    @for $i from 1 through 6 {
      --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-medium);
      --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-medium);
    }
  }

  &.large {
    --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-large);
    --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-large);

    @for $i from 1 through 6 {
      --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-large);
      --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-large);
    }
  }

  /**
   *
   * Line heights
   *
   */

  &.tight {
    --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-tight);
    --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-tight);

    @for $i from 1 through 6 {
      --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-tight);
      --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-tight);
    }
  }

  &.normal {
    --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-normal);
    --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-normal);

    @for $i from 1 through 6 {
      --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-normal);
      --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-normal);
    }
  }

  &.loose {
    --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-loose);
    --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-loose);

    @for $i from 1 through 6 {
      --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-loose);
      --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-loose);
    }
  }

  /**
   *
   * Children – p, a
   *
   */

  p {
    font-size: var(--cap-richTextParagraphFontSize);
    line-height: var(--cap-richTextParagraphLineHeight);
  }

  a {
    color: var(--cap-richTextAnchorColor, blue);
    font-weight: var(--cap-richTextAnchorFontWeight, map.get(cap.$weights, 'strong'));
  }

  /**
   *
   * Families
   *
   */

  @each $name, $family in cap.$families {
    &.#{$name} {
      $defaultFamily: string.unquote($family);

      --cap-richTextCapHeight: var(--cap-capHeight-#{$name}, 2000);
      --cap-richTextFontFamily: var(--cap-fontFamily-#{$name}, #{$defaultFamily});
      --cap-richTextFontFeatureSettings: var(--cap-fontFeatureSettings-#{$name}, normal);
      --cap-richTextLetterSpacingFactor: var(--cap-letterSpacingFactor-#{$name}, 1);
      --cap-richTextUpm: var(--cap-upm-#{$name}, 3000);

      @each $weightKey, $weight in cap.$weights {
        --cap-richTextFontWeight-#{$weightKey}: var(--cap-fontWeight-#{$weightKey}-#{$name}, #{$weight});
      }
    }
  }

  /**
   *
   * Sizes
   *
   */

  @each $name, $size in $baseSizes {
    $selector: if(cap.hasSign($name), '\\#{$name}', '\\3#{$name}');
    $baseSizeIndex: index(cap.$sizes, $name $size);

    &.#{$selector} {
      $paragraphPropsMedium: map.get($size, 'medium');
      $paragraphPropsLarge: map.get($size, 'large');
      $paragraphLineHeightNormalMedium: list.nth($paragraphPropsMedium, 2);
      $paragraphLineHeightTightMedium: $paragraphLineHeightNormalMedium - 2px;
      $paragraphLineHeightLooseMedium: $paragraphLineHeightNormalMedium + 2px;
      $paragraphLineHeightNormalLarge: list.nth($paragraphPropsLarge, 2);
      $paragraphLineHeightTightLarge: $paragraphLineHeightNormalLarge - 2px;
      $paragraphLineHeightLooseLarge: $paragraphLineHeightNormalLarge + 2px;

      --cap-richTextParagraphFontSize-large: #{list.nth($paragraphPropsLarge, 1)};
      --cap-richTextParagraphFontSize-medium: #{list.nth($paragraphPropsMedium, 1)};
      --cap-richTextParagraphLineHeight-large-tight: #{$paragraphLineHeightTightLarge};
      --cap-richTextParagraphLineHeight-medium-tight: #{$paragraphLineHeightTightMedium};
      --cap-richTextParagraphLineHeight-large-normal: #{$paragraphLineHeightNormalLarge};
      --cap-richTextParagraphLineHeight-medium-normal: #{$paragraphLineHeightNormalMedium};
      --cap-richTextParagraphLineHeight-large-loose: #{$paragraphLineHeightLooseLarge};
      --cap-richTextParagraphLineHeight-medium-loose: #{$paragraphLineHeightLooseMedium};

      @for $i from 0 through 5 {
        $heading: list.nth(cap.$sizes, $baseSizeIndex - $i);
        $headingProps: list.nth($heading, 2);
        $headingPropsMedium: map.get($headingProps, 'medium');
        $headingPropsLarge: map.get($headingProps, 'large');
        $headingLineHeightNormalMedium: list.nth($headingPropsMedium, 2);
        $headingLineHeightTightMedium: $headingLineHeightNormalMedium - 2px;
        $headingLineHeightLooseMedium: $headingLineHeightNormalMedium + 2px;
        $headingLineHeightNormalLarge: list.nth($headingPropsLarge, 2);
        $headingLineHeightTightLarge: $headingLineHeightNormalLarge - 2px;
        $headingLineHeightLooseLarge: $headingLineHeightNormalLarge + 2px;

        --cap-richTextHeadingFontSize-#{6 - $i}-large: #{list.nth($headingPropsLarge, 1)};
        --cap-richTextHeadingFontSize-#{6 - $i}-medium: #{list.nth($headingPropsMedium, 1)};
        --cap-richTextHeadingLineHeight-#{6 - $i}-large-tight: #{$headingLineHeightTightLarge};
        --cap-richTextHeadingLineHeight-#{6 - $i}-medium-tight: #{$headingLineHeightTightMedium};
        --cap-richTextHeadingLineHeight-#{6 - $i}-large-normal: #{$headingLineHeightNormalLarge};
        --cap-richTextHeadingLineHeight-#{6 - $i}-medium-normal: #{$headingLineHeightNormalMedium};
        --cap-richTextHeadingLineHeight-#{6 - $i}-large-loose: #{$headingLineHeightLooseLarge};
        --cap-richTextHeadingLineHeight-#{6 - $i}-medium-loose: #{$headingLineHeightLooseMedium};
      }
    }
  }

  /**
   *
   * Children – h1...6
   *
   */

  @for $i from 1 through 6 {
    h#{$i} {
      font-size: var(--cap-richTextHeadingFontSize-#{$i});
      line-height: var(--cap-richTextHeadingLineHeight-#{$i});
    }
  }
}
