/**
 *
 * Modules
 *
 */

@use './../../shared/cap.m' as cap;
@use './cap-rich-text.m' as self;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

/**
 *
 * Variables
 *
 */

$baseSizes: (
  '+1': map.get(cap.$sizes, '+1'),
  '0': map.get(cap.$sizes, '0'),
  '-1': map.get(cap.$sizes, '-1'),
);

/**
 *
 * Rules
 *
 */

:host {
  /** @prop --cap-richTextAnchorColor: Description... */
  /** @prop --cap-richTextAnchorFontWeight: Description... */

  display: block;
  font-family: var(--cap-richTextFontFamily);
  font-feature-settings: var(--cap-richTextFontFeatureSettings);
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;

  @at-root {
    #{&}(.adaptive) {
      --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-medium);
      --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-medium);

      @for $i from 1 through 6 {
        --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-medium);
        --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-medium);
      }

      @media (pointer: coarse) {
        --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-large);
        --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-large);

        @for $i from 1 through 6 {
          --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-large);
          --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-large);
        }
      }
    }

    #{&}(.medium) {
      --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-medium);
      --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-medium);

      @for $i from 1 through 6 {
        --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-medium);
        --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-medium);
      }
    }

    #{&}(.large) {
      --cap-richTextParagraphFontSize: var(--cap-richTextParagraphFontSize-large);
      --cap-richTextParagraphLineHeight: var(--cap-richTextParagraphLineHeight-large);

      @for $i from 1 through 6 {
        --cap-richTextHeadingFontSize-#{$i}: var(--cap-richTextHeadingFontSize-#{$i}-large);
        --cap-richTextHeadingLineHeight-#{$i}: var(--cap-richTextHeadingLineHeight-#{$i}-large);
      }
    }

    /**
     *
     * Line heights
     *
     */

    #{&}(.tight) {
      --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-tight);
      --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-tight);

      @for $i from 1 through 6 {
        --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-tight);
        --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-tight);
      }
    }

    #{&}(.compact) {
      --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-compact);
      --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-compact);

      @for $i from 1 through 6 {
        --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-compact);
        --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-compact);
      }
    }

    #{&}(.loose) {
      --cap-richTextParagraphLineHeight-large: var(--cap-richTextParagraphLineHeight-large-loose);
      --cap-richTextParagraphLineHeight-medium: var(--cap-richTextParagraphLineHeight-medium-loose);

      @for $i from 1 through 6 {
        --cap-richTextHeadingLineHeight-#{$i}-large: var(--cap-richTextHeadingLineHeight-#{$i}-large-loose);
        --cap-richTextHeadingLineHeight-#{$i}-medium: var(--cap-richTextHeadingLineHeight-#{$i}-medium-loose);
      }
    }

    @each $name, $family in cap.$families {
      #{&}(.#{$name}) {
        $defaultFamily: string.unquote($family);

        --cap-richTextCapHeight: var(--cap-capHeight-#{$name}, 2000);
        --cap-richTextFontFamily: var(--cap-fontFamily-#{$name}, #{$defaultFamily});
        --cap-richTextFontFeatureSettings: var(--cap-fontFeatureSettings-#{$name}, normal);
        --cap-richTextLetterSpacingFactor: var(--cap-letterSpacingFactor-#{$name}, 1);
        --cap-richTextUpm: var(--cap-upm-#{$name}, 3000);

        @each $weightKey, $weight in cap.$weights {
          --cap-richTextFontWeight-#{$weightKey}: var(--cap-fontWeight-#{$weightKey}-#{$name}, #{$weight});
        }
      }
    }

    @each $name, $size in $baseSizes {
      $selector: if(cap.hasSign($name), '\\#{$name}', '\\3#{$name}');
      $baseSizeIndex: index(cap.$sizes, $name $size);

      #{&}(.#{$selector}) {
        $paragraphPropsMedium: map.get($size, 'medium');
        $paragraphPropsLarge: map.get($size, 'large');
        $paragraphLineHeightCompactMedium: list.nth($paragraphPropsMedium, 2);
        $paragraphLineHeightTightMedium: $paragraphLineHeightCompactMedium - 2px;
        $paragraphLineHeightLooseMedium: $paragraphLineHeightCompactMedium + 2px;
        $paragraphLineHeightCompactLarge: list.nth($paragraphPropsLarge, 2);
        $paragraphLineHeightTightLarge: $paragraphLineHeightCompactLarge - 2px;
        $paragraphLineHeightLooseLarge: $paragraphLineHeightCompactLarge + 2px;

        --cap-richTextParagraphFontSize-large: #{list.nth($paragraphPropsLarge, 1)};
        --cap-richTextParagraphFontSize-medium: #{list.nth($paragraphPropsMedium, 1)};
        --cap-richTextParagraphLineHeight-large-compact: #{$paragraphLineHeightCompactLarge};
        --cap-richTextParagraphLineHeight-large-loose: #{$paragraphLineHeightLooseLarge};
        --cap-richTextParagraphLineHeight-large-tight: #{$paragraphLineHeightTightLarge};
        --cap-richTextParagraphLineHeight-medium-compact: #{$paragraphLineHeightCompactMedium};
        --cap-richTextParagraphLineHeight-medium-loose: #{$paragraphLineHeightLooseMedium};
        --cap-richTextParagraphLineHeight-medium-tight: #{$paragraphLineHeightTightMedium};

        @for $i from 0 through 5 {
          $heading: list.nth(cap.$sizes, $baseSizeIndex - $i);
          $headingProps: list.nth($heading, 2);
          $headingPropsMedium: map.get($headingProps, 'medium');
          $headingPropsLarge: map.get($headingProps, 'large');
          $headingLineHeightCompactMedium: list.nth($headingPropsMedium, 2);
          $headingLineHeightTightMedium: $headingLineHeightCompactMedium - 2px;
          $headingLineHeightLooseMedium: $headingLineHeightCompactMedium + 2px;
          $headingLineHeightCompactLarge: list.nth($headingPropsLarge, 2);
          $headingLineHeightTightLarge: $headingLineHeightCompactLarge - 2px;
          $headingLineHeightLooseLarge: $headingLineHeightCompactLarge + 2px;

          --cap-richTextHeadingFontSize-#{6 - $i}-large: #{list.nth($headingPropsLarge, 1)};
          --cap-richTextHeadingFontSize-#{6 - $i}-medium: #{list.nth($headingPropsMedium, 1)};
          --cap-richTextHeadingLineHeight-#{6 - $i}-large-compact: #{$headingLineHeightCompactLarge};
          --cap-richTextHeadingLineHeight-#{6 - $i}-large-loose: #{$headingLineHeightLooseLarge};
          --cap-richTextHeadingLineHeight-#{6 - $i}-large-tight: #{$headingLineHeightTightLarge};
          --cap-richTextHeadingLineHeight-#{6 - $i}-medium-compact: #{$headingLineHeightCompactMedium};
          --cap-richTextHeadingLineHeight-#{6 - $i}-medium-loose: #{$headingLineHeightLooseMedium};
          --cap-richTextHeadingLineHeight-#{6 - $i}-medium-tight: #{$headingLineHeightTightMedium};
        }
      }
    }
  }
}

@for $i from 1 through 6 {
  ::slotted(h#{$i}) {
    font-size: var(--cap-richTextHeadingFontSize-#{$i});
    line-height: var(--cap-richTextHeadingLineHeight-#{$i});
  }
}

::slotted(p),
::slotted(ul),
::slotted(ol) {
  font-size: var(--cap-richTextParagraphFontSize);
  line-height: var(--cap-richTextParagraphLineHeight);
}
