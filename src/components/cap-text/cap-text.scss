/**
 *
 * Modules
 *
 */

@use './cap-text.m' as self;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

/**
 *
 * Rules
 *
 */

:host {
  /**
   *
   * Custom properties
   *
   */

  /** @prop --cap-capHeight-mono: Description... */
  /** @prop --cap-capHeight-sans: Description... */
  /** @prop --cap-capHeight-serif: Description... */
  /** @prop --cap-fontFamily-mono: Description... */
  /** @prop --cap-fontFamily-sans: Description... */
  /** @prop --cap-fontFamily-serif: Description... */
  /** @prop --cap-fontFeatureSettings-mono: Description... */
  /** @prop --cap-fontFeatureSettings-sans: Description... */
  /** @prop --cap-fontFeatureSettings-serif: Description... */
  /** @prop --cap-fontWeight-heavy-mono: Description... */
  /** @prop --cap-fontWeight-heavy-sans: Description... */
  /** @prop --cap-fontWeight-heavy-serif: Description... */
  /** @prop --cap-fontWeight-light-mono: Description... */
  /** @prop --cap-fontWeight-light-sans: Description... */
  /** @prop --cap-fontWeight-light-serif: Description... */
  /** @prop --cap-fontWeight-soft-mono: Description... */
  /** @prop --cap-fontWeight-soft-sans: Description... */
  /** @prop --cap-fontWeight-soft-serif: Description... */
  /** @prop --cap-fontWeight-strong-mono: Description... */
  /** @prop --cap-fontWeight-strong-sans: Description... */
  /** @prop --cap-fontWeight-strong-serif: Description... */
  /** @prop --cap-letterSpacingFactor-mono: Description... */
  /** @prop --cap-letterSpacingFactor-sans: Description... */
  /** @prop --cap-letterSpacingFactor-serif: Description... */
  /** @prop --cap-upm-mono: Description... */
  /** @prop --cap-upm-sans: Description... */
  /** @prop --cap-upm-serif: Description... */

  display: block;
  min-width: var(--minWidth, auto);
  padding-bottom: 1px;
  padding-top: 1px;

  /**
   *
   * Trim
   *
   */

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
  }

  &::before {
    margin-top: calc((var(--offset) + 1px) * -1);
  }

  &::after {
    margin-bottom: calc((var(--offset) + 1px) * -1);
  }

  @at-root {
    /**
     *
     * Ellipsis
     *
     */

    #{&}(.ellipsis) {
      --minWidth: 0;
      --overflow: hidden;
      --textOverflow: ellipsis;
      --whiteSpace: nowrap;
      --width: 100%;
    }

    /**
     *
     * No wrap
     *
     */

    #{&}(.no-wrap) {
      --whiteSpace: nowrap;
    }

    /**
     *
     * Scales
     *
     */

    #{&}(.adaptive) {
      --fontSize: var(--fontSize-medium);
      --lineHeight: var(--lineHeight-medium);

      @media (pointer: coarse) {
        --fontSize: var(--fontSize-large);
        --lineHeight: var(--lineHeight-large);
      }
    }

    #{&}(.medium) {
      --fontSize: var(--fontSize-medium);
      --lineHeight: var(--lineHeight-medium);
    }

    #{&}(.large) {
      --fontSize: var(--fontSize-large);
      --lineHeight: var(--lineHeight-large);
    }

    /**
     *
     * Line heights
     *
     */

    #{&}(.tight) {
      --lineHeight-large: var(--lineHeight-large-tight);
      --lineHeight-medium: var(--lineHeight-medium-tight);
    }

    #{&}(.normal) {
      --lineHeight-large: var(--lineHeight-large-normal);
      --lineHeight-medium: var(--lineHeight-medium-normal);
    }

    #{&}(.loose) {
      --lineHeight-large: var(--lineHeight-large-loose);
      --lineHeight-medium: var(--lineHeight-medium-loose);
    }

    /**
     *
     * Sizes
     *
     */

    @each $name, $props in self.$sizes {
      $selector: if(self.hasSign($name), '\\#{$name}', '\\3#{$name}');

      #{&}(.#{$selector}) {
        @each $scale in map.keys($props) {
          $fontSize: list.nth(map.get($props, $scale), 1);
          $lineHeightNormal: list.nth(map.get($props, $scale), 2);
          $lineHeightTight: $lineHeightNormal - 2px;
          $lineHeightLoose: $lineHeightNormal + 2px;

          --fontSize-#{$scale}: #{$fontSize};
          --lineHeight-#{$scale}-loose: #{$lineHeightLoose};
          --lineHeight-#{$scale}-normal: #{$lineHeightNormal};
          --lineHeight-#{$scale}-tight: #{$lineHeightTight};
        }
      }
    }

    /**
     *
     * Families
     *
     */

    @each $name, $family in self.$families {
      #{&}(.#{$name}) {
        $defaultFamily: string.unquote($family);

        --capHeight: var(--cap-capHeight-#{$name}, 2000);
        --fontFamily: var(--cap-fontFamily-#{$name}, #{$defaultFamily});
        --fontFeatureSettings: var(--cap-fontFeatureSettings-#{$name}, normal);
        --letterSpacingFactor: var(--cap-letterSpacingFactor-#{$name}, 1);
        --upm: var(--cap-upm-#{$name}, 3000);

        @each $weightKey, $weight in self.$weights {
          --fontWeight-#{$weightKey}: var(--cap-fontWeight-#{$weightKey}-#{$name}, #{$weight});
        }
      }
    }

    /**
     *
     * Weights
     *
     */

    @each $name in map.keys(self.$weights) {
      #{&}(.#{$name}) {
        --fontWeight: var(--fontWeight-#{$name});
      }
    }
  }
}

.text {
  display: block;
  font-family: var(--fontFamily);
  font-feature-settings: var(--fontFeatureSettings);
  font-kerning: normal;
  font-size: var(--fontSize);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: var(--fontWeight);
  letter-spacing: var(--letterSpacing);
  line-height: var(--lineHeight);
  margin: 0;
  overflow: var(--overflow, visible);
  text-overflow: var(--textOverflow, clip);
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;
  white-space: var(--whiteSpace, normal);
  width: var(--width, auto);

  /**
   *
   * Addons
   *
   */

  &.text-before {
    &:before {
      content: attr(data-text-before) '\0000A0';
    }
  }

  &.text-after {
    &:after {
      content: '\0000A0'attr(data-text-after);
    }
  }
}
