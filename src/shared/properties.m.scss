/**
 *
 * Modules
 *
 */

@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use './media.m' as media;

/**
 *
 * Mixins
 *
 */

@mixin families {
  @each $family
    in (('sans', 'sans-serif'), ('serif', 'serif'), ('mono', 'monospace'))
  {
    @at-root {
      #{&}(.#{list.nth($family, 1)}) {
        --cap-height: var(--cap-cap-height-#{list.nth($family, 1)}, 2000);
        --font-family: var(
          --cap-font-family-#{list.nth($family, 1)},
          #{string.unquote(list.nth($family, 2))}
        );
        --spacing-factor: var(--cap-spacing-factor-#{list.nth($family, 1)}, 1);
        --upm: var(--cap-upm-#{list.nth($family, 1)}, 3000);
      }
    }
  }
}

@mixin levels($level) {
  @each $name, $props in $level {
    @each $size in map.keys($props) {
      @at-root {
        #{&}(.#{$name}) {
          --font-size-#{$size}: #{list.nth(map.get($props, $size), 1)};
          --line-height-#{$size}: #{list.nth(map.get($props, $size), 2)};
        }
      }
    }
  }
}

@mixin sizes {
  @at-root {
    #{&}(.adaptive) {
      --font-size: var(--font-size-normal);
      --line-height: var(--line-height-normal);

      @include media.touch {
        --font-size: var(--font-size-large);
        --line-height: var(--line-height-large);
      }
    }

    #{&}(.normal) {
      --font-size: var(--font-size-normal);
      --line-height: var(--line-height-normal);
    }

    #{&}(.large) {
      --font-size: var(--font-size-large);
      --line-height: var(--line-height-large);
    }
  }
}

@mixin weights {
  @each $weight
    in (('light', 300), ('soft', 400), ('strong', 500), ('heavy', 600))
  {
    @at-root {
      #{&}(.#{list.nth($weight, 1)}) {
        --font-weight: var(
          --cap-font-weight-#{list.nth($weight, 1)},
          #{list.nth($weight, 2)}
        );
      }
    }
  }
}

@mixin clip {
  @at-root {
    #{&}(.clip) {
      --min-width: 0;
      --overflow: hidden;
      --text-overflow: ellipsis;
      --white-space: nowrap;
      --width: 100%;
    }
  }
}
